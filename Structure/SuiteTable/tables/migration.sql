
--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
--XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

START TRANSACTION;

-- Désactivation des contraintes de clé étrangère

SET foreign_key_checks = 0;

-- Suppression des tables si elles existent

DROP TABLE IF EXISTS ARTICLES_TAGS;
DROP TABLE IF EXISTS ARTICLES;
DROP TABLE IF EXISTS CATEGORIES;
DROP TABLE IF EXISTS CATEGORIESPRODUITS;
DROP TABLE IF EXISTS COMMANDE;
DROP TABLE IF EXISTS COMMENTAIRES;
DROP TABLE IF EXISTS DEVIS;
DROP TABLE IF EXISTS FACTURE_PRODUIT;
DROP TABLE IF EXISTS FACTURE;
DROP TABLE IF EXISTS IMAGE;
DROP TABLE IF EXISTS MESSAGE;
DROP TABLE IF EXISTS PRODUIT_COMMANDE;
DROP TABLE IF EXISTS PRODUIT_DEVIS;
DROP TABLE IF EXISTS PRODUIT;
DROP TABLE IF EXISTS ROLE;
DROP TABLE IF EXISTS TAGS;
DROP TABLE IF EXISTS UTILISATEURS;

-- Création des tables

CREATE TABLE ARTICLES (
  article_id INT AUTO_INCREMENT PRIMARY KEY,
  titre VARCHAR(255),
  contenu TEXT NOT NULL,
  date_publication TIMESTAMP NOT NULL,
  auteur VARCHAR(255),
  statut_publication TINYINT,
  vues INT,
  image_couverture VARCHAR(1024),
  categorie_id INT NOT NULL,
  utilisateur_id INT NOT NULL,
  love INT,
  FOREIGN KEY (categorie_id) REFERENCES CATEGORIES(categorie_id),
  FOREIGN KEY (utilisateur_id) REFERENCES UTILISATEURS(utilisateur_id)
);

CREATE TABLE ARTICLES_TAGS (
  article_tag_id INT AUTO_INCREMENT PRIMARY KEY,
  article_id INT NOT NULL,
  tag_id INT NOT NULL,
  FOREIGN KEY (article_id) REFERENCES ARTICLES(article_id),
  FOREIGN KEY (tag_id) REFERENCES TAGS(tag_id)
);

CREATE TABLE CATEGORIES (
  categorie_id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(255),
  description VARCHAR(1024)
);

CREATE TABLE CATEGORIESPRODUITS (
  categoriesproduits_id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(255)
);

CREATE TABLE COMMANDE (
  commande_id INT AUTO_INCREMENT PRIMARY KEY,
  numero_commande VARCHAR(255),
  date_commande TIMESTAMP,
  statu_commande VARCHAR(255),
  utilisateur_id INT NOT NULL,
  facture_id INT NOT NULL,
  FOREIGN KEY (utilisateur_id) REFERENCES UTILISATEURS(utilisateur_id),
  FOREIGN KEY (facture_id) REFERENCES FACTURE(facture_id)
);

CREATE TABLE COMMENTAIRES (
  comment_id INT AUTO_INCREMENT PRIMARY KEY,
  titre VARCHAR(255),
  contenu TEXT,
  date_commentaire TIMESTAMP,
  auteur VARCHAR(255),
  statut_commentaire TINYINT,
  article_id INT NOT NULL,
  FOREIGN KEY (article_id) REFERENCES ARTICLES(article_id)
);

CREATE TABLE DEVIS (
  devis_id INT AUTO_INCREMENT PRIMARY KEY,
  numero_devis VARCHAR(255),
  nom_client VARCHAR(255),
  date_devis TIMESTAMP,
  validite_devis VARCHAR(255),
  detail_projet VARCHAR(1024),
  statut_devis TINYINT,
  utilisateur_id INT NOT NULL,
  facture_id INT NOT NULL,
  FOREIGN KEY (utilisateur_id) REFERENCES UTILISATEURS(utilisateur_id),
  FOREIGN KEY (facture_id) REFERENCES FACTURE(facture_id)
);

CREATE TABLE FACTURE (
  facture_id INT AUTO_INCREMENT PRIMARY KEY,
  numero_facture VARCHAR(255),
  nom_client VARCHAR(255),
  date_facture TIMESTAMP,
  date_echeance TIMESTAMP,
  montant_total DECIMAL(10,2),
  detail_projet VARCHAR(255),
  mode_paiement VARCHAR(255),
  statut_facture TINYINT,
  information_paiement VARCHAR(255),
  utilisateur_id INT NOT NULL,
  FOREIGN KEY (utilisateur_id) REFERENCES UTILISATEURS(utilisateur_id)
);

CREATE TABLE FACTURE_PRODUIT (
  facture_produit_id INT AUTO_INCREMENT PRIMARY KEY,
  facture_id INT NOT NULL,
  produit_id INT NOT NULL,
  FOREIGN KEY (facture_id) REFERENCES FACTURE(facture_id),
  FOREIGN KEY (produit_id) REFERENCES PRODUIT(produit_id)
);

CREATE TABLE IMAGE (
  image_id INT AUTO_INCREMENT PRIMARY KEY,
  photo VARCHAR(255),
  produit_id INT NOT NULL,
  FOREIGN KEY (produit_id) REFERENCES PRODUIT(produit_id)
);

CREATE TABLE MESSAGE (
  message_id INT AUTO_INCREMENT PRIMARY KEY,
  pseudo VARCHAR(255),
  email VARCHAR(255),
  sujet TEXT,
  message TEXT,
  utilisateur_id INT NOT NULL,
  FOREIGN KEY (utilisateur_id) REFERENCES UTILISATEURS(utilisateur_id)
);

CREATE TABLE PRODUIT (
  produit_id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(255),
  quantite INT,
  detail TEXT,
  tarif DECIMAL(10,2),
  statut INT,
  categoriesproduits_id INT NOT NULL,
  FOREIGN KEY (categoriesproduits_id) REFERENCES CATEGORIESPRODUITS(categoriesproduits_id)
);

CREATE TABLE PRODUIT_COMMANDE (
  produit_commande_id INT AUTO_INCREMENT PRIMARY KEY,
  commande_id INT NOT NULL,
  produit_id INT NOT NULL,
  FOREIGN KEY (commande_id) REFERENCES COMMANDE(commande_id),
  FOREIGN KEY (produit_id) REFERENCES PRODUIT(produit_id)
);

CREATE TABLE PRODUIT_DEVIS (
  produit_devis_id INT AUTO_INCREMENT PRIMARY KEY,
  produit_id INT NOT NULL,
  devis_id INT NOT NULL,
  FOREIGN KEY (produit_id) REFERENCES PRODUIT(produit_id),
  FOREIGN KEY (devis_id) REFERENCES DEVIS(devis_id)
);

CREATE TABLE ROLE (
  role_id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(255)
);

CREATE TABLE TAGS (
  tag_id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(255)
);

CREATE TABLE UTILISATEURS (
  utilisateur_id INT AUTO_INCREMENT PRIMARY KEY,
  nom VARCHAR(255),
  prenom VARCHAR(255),
  societe VARCHAR(255),
  pseudo VARCHAR(255),
  statut VARCHAR(255),
  email VARCHAR(255),
  mot_de_passe VARCHAR(255),
  rue VARCHAR(255),
  ville VARCHAR(255),
  code_postal INT,
  date_inscription TIMESTAMP,
  avatar VARCHAR(255),
  biographie TEXT,
  role_id INT NOT NULL,
  FOREIGN KEY (role_id) REFERENCES ROLE(role_id)
);

-- Réactivation des contraintes de clé étrangère

SET foreign_key_checks = 1;

COMMIT;




